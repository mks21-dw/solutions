
=======================
Question 0:
(define Stuyvesant (lambda (currentyr)
  (build-list (- currentyr 1904)
          	(lambda (x)(+ x 1905)))))
(Stuyvesant 2023)
=======================
Question 1:
#|
Programming question: Write a function that returns the product of all the odd values in a list.

Description
Use functions such as null?,cons, filter, list, first, rest. 

Possible solution:
(define g (list 1 2 3 4 5 6 7 8 9 10))
(define oddProduct
  (lambda (n g)
    (if (null? g)
        (0)
        (* (first (filter odd? g)) (rest (filter odd? g))))))
(oddProduct 10 g)
=======================
Question 2:

=======================
Question 3:

=======================
Question 4:

=======================
Question 5:
(define fib
  (lambda (n)
    (cons 0 (cons 1 (helper n 0 1 2)))))

(define helper
  (lambda (n prev1 prev2 cur)
    (if (= n cur)
        (list)
        (cons (+ prev1 prev2) (helper n prev2 (+ prev1 prev2) (+ cur 1))))))
=======================
Question 6:

=======================
Question 7:
(define Rsum
  (lambda (g)
    (if (null? g)
        0
        (+ (/ 1 (first g)) (Rsum (rest g)))
        )))
=======================
Question 8:

=======================
Question 9:

=======================
Question 10:

=======================
Question 11:

=======================
Question 12:

=======================
Question 13:
(define filterOdds
  (lambda (odds g)
    (if odds
        (filter odd? g)
        #f)))
=======================
Question 14:
(define filterevensquares
  (lambda (n)
    (filter even?
            (if (= n 0)
                (list)
                (cons (* n n) (filterevensquares (- n 1)))))))
(filterevensquares 5)
=======================
Question 15:
#|
Possible solution:
(define myExpt
 (lambda (a b)
  (if (= b 1)
      a
      (* a (myExpt a (- b 1))))))
|#
=======================
Question 16:

=======================
Question 17:
(define Rsum
  (lambda (g)
    (if (null? g)
        0
        (+ (/ 1 (first g)) (Rsum (rest g)))
        )))

(Rsum '(5 25 125))
=======================
Question 18:

=======================
Question 19:

=======================
Question 20:

=======================
Question 21:

=======================
Question 22:
(define myExpt
  (lambda (a b)
    (if (= 1 b)
            a
            (if (= 2 b)
                (* a a)
                (* a (myExpt a (- b 1)))))))
=======================
Question 23:
#lang racket
(define Stuyvesant (lambda (currentyr)
  (build-list (- currentyr 1904)
          	(lambda (x)(+ x 1905)))))
(Stuyvesant 2023)
=======================
Question 24:

=======================
Question 25:
(define fib
  (lambda (n)
    (cons 0 (cons 1 (helper n 0 1 2)))))

(define helper
  (lambda (n prev1 prev2 cur)
    (if (= n cur)
        (list)
        (cons (+ prev1 prev2) (helper n prev2 (+ prev1 prev2) (+ cur 1))))))
=======================
Question 26:

=======================
Question 27:

=======================
Question 28:
(define filterEvenSquares
  (lambda (n)
    (filter even?
            (if (= n 0)
                (list)
                (cons (* n n) (filterEvenSquares (- n 1)))))))
       
(filterEvenSquares 5)
=======================
Question 29:

=======================
Question 30:

=======================
Question 31:
(define evens
  (lambda (g)
    (if (null? g)
        0
        (if (even? (first g))
            (+ 1 (evens (rest g)))
            (evens (rest g))))))
(define lista (list 1 2 3 4 5 6 7 8 8 10))
(evens lista)
=======================
Question 32:

=======================
Question 33:
(define findAverage
  (lambda (g)
    (/ (foldl + 0 g) (length g))))
(findAverage (list 5 10 9))
=======================
Question 34:

=======================
Question 35:

=======================
Question 36:

=======================
Question 37:

=======================
Question 38:
(define diceRoll
  (build-list 20 (lambda (x) (random 1 21))))

(define getTwenty
  (lambda (g)
    (if (null? g)
        (print "you lose! :(")
        (if (= (first g) 20)
            (print "you win! :D")
            (getTwenty (rest g))))))
(getTwenty diceRoll)
=======================
Question 39:

=======================
Question 40:
(define inbetweenList
  (lambda (a b g)
    (if (null? g)
        (list)
        (if (and (> (first g) a) (< (first g) b))
            (cons (first g) (inbetweenList a b (rest g)))
            (inbetweenList a b (rest g))))))

(define jList (build-list 10 (lambda (x) (random 10))))
=======================
Question 41:
(define a(build-list 10 (lambda(n) (random 20))))
a
(define half
  (lambda (g)
    (if (null? g)
        (list)
        (cons (/ (first g) 2) (half (rest g))))))
(half a)
=======================
Question 42:
(define multiplyListSum (lambda (given n)
                          (if (null? given)
                              0
                              (+ (* n (first given)) (multiplyListSum (rest given) n)))))
=======================
Question 43:

=======================
Question 44:

=======================
Question 45:

=======================
Question 46:
(define (weirdAlgorithm n)
  (if (= n 1)
      (list 1)
      (cons n (if (even? n)
                (weirdAlgorithm (/ n 2))
                (weirdAlgorithm (+ (* n 3) 1))))))
(weirdAlgorithm 3)
=======================
Question 47:
(define D&D:Diabolical_Difficulty
  (build-list 20 (lambda (x) (random 1 21))))

(define nat20
  (lambda (g)
    (if (null? g)
        (print "you lose! :(")
        (if (= 20 (first g))
            (print "you win! :D")
            (nat20 (rest g))))))
(display D&D:Diabolical_Difficulty)(display ": ")(nat20 D&D:Diabolical_Difficulty)
=======================
Question 48:
(define (multiplylistsum)
  (lambda (g n)
  (if (null? g)
      0 
      (* (+ (first g) (multiplylistsum (rest g) n))))))
=======================
Question 49:

=======================
Question 50:

=======================
Question 51:

=======================
Question 52:
(define evenValues (lambda (g) (filter even? g)))
=======================
Question 53:

=======================
Question 54:

=======================
Question 55:

=======================
Question 56:

=======================
Question 57:

=======================
Question 58:

=======================
Question 59:
(define g (list 0 1 2 3 4 5))
(define lengthfunction (lambda (g) (foldl (lambda (n previous) (+ 1 previous)) 0 g)))
(lengthfunction g)
(length g)